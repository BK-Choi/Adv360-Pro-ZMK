
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

/ {
  behaviors {
    #include "macros.dtsi"
    #include "version.dtsi"

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <175>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };
  };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
        &kp EQUAL        &kp N1  &kp N2        &kp N3        &kp N4  &kp N5                &mo 2                                                                                      &mo 2  &kp N6         &kp N7            &kp N8    &kp N9         &kp N0      &kp EQUAL
        &lt 3 TAB         &kp Q   &kp W         &kp E         &kp R   &kp T              &kp ESC                                                                                   &kp HOME   &kp Y          &kp U             &kp I     &kp O          &kp P      &kp MINUS
            &mo 1         &kp A   &kp S         &kp D         &kp F   &kp G                &none  &kp LC(LEFT_ARROW)   &kp LC(RIGHT_ARROW)                   &none  &kp LEFT_GUI    &kp END   &kp H          &kp J             &kp K     &kp L       &kp SEMI        &kp SQT
        &kp LSHFT         &kp Z   &kp X         &kp C         &kp V   &kp B                                           &kp LG(LS(NUMBER_4))                   &none                            &kp N          &kp M         &kp COMMA   &kp DOT       &kp FSLH      &kp RSHFT
 &kp LEFT_CONTROL  &kp LEFT_ALT   &none  &kp LEFT_ALT  &kp LEFT_GUI                    &kp SPACE       &kp LA(SPACE)  &kp LG(LS(NUMBER_5))                   &mo 1     &kp ENTER  &kp SPACE          &kp RIGHT_GUI  &kp LEFT_BRACKET  &kp RBKT  &kp BACKSLASH  &kp RIGHT_GUI
            >;
        };

        layer_MOVE {
            bindings = <
 &trans  &kp F1                 &kp F2                 &kp F3                 &kp F4                 &kp F5                        &trans                                                                           &trans               &kp F6          &kp F7          &kp F8           &kp F9    &kp F10  &kp F11
 &trans  &trans  &kp LS(LA(LC(LG(W))))  &kp LS(LA(LC(LG(E))))  &kp LS(LA(LC(LG(R))))  &kp LS(LA(LC(LG(T))))                         &none                                                                            &none               &trans   &kp BACKSPACE    &kp UP_ARROW          &kp DEL  &kp PG_UP  &kp F12
 &trans  &trans  &kp LS(LA(LC(LG(S))))  &kp LS(LA(LC(LG(D))))  &kp LS(LA(LC(LG(F))))  &kp LS(LA(LC(LG(G))))                         &none               &trans  &trans                    &kp C_MUTE    &trans       &none   &kp LG(LEFT_ARROW)  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_DN   &trans
 &trans  &trans                 &trans                 &trans                 &trans                 &trans                                                     &trans                  &kp C_VOL_UP                        &kp LG(RIGHT_ARROW)          &trans          &trans           &trans     &trans   &trans
 &trans  &trans                 &trans                 &trans                 &trans                                   &kp LC(LEFT_ARROW)  &kp LC(RIGHT_ARROW)  &trans                  &kp C_VOL_DN  &kp C_PP  &kp C_NEXT                               &trans          &trans           &trans     &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                           &none                                                                              &trans   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none                     &bootloader                                                                         &bootloader   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none            &rgb_ug RGB_MEFS_CMD       &none   &none                  &bt BT_CLR       &none  &rgb_ug RGB_MEFS_CMD 5   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none    &macro_ver         &none                                               &none                       &none                                       &none       &none       &none   &none   &none   &none
  &none         &none         &none    &bl BL_INC    &bl BL_DEC                               &rgb_ug RGB_TOG  &bl BL_TOG   &none                       &none  &bl BL_TOG         &rgb_ug RGB_TOG          &bl BL_INC  &bl BL_DEC   &none   &none   &none
            >;
        };

        layer_DEV {
            bindings = <
 &trans  &trans  &kp LS(F6)         &trans         &trans      &trans            &trans                                                  &trans  &trans  &trans                  &trans  &trans  &trans  &trans
 &trans  &trans      &trans         &trans  &kp LC(LS(R))      &trans            &trans                                                  &trans  &trans  &trans    &kp LA(LS(UP_ARROW))  &trans  &trans  &trans
 &trans  &trans      &trans  &kp LC(LS(D))  &kp LA(LG(L))      &trans            &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &kp LA(LS(DOWN_ARROW))  &trans  &trans  &trans
 &trans  &trans      &trans         &trans         &trans  &kp LG(F8)                            &trans                  &trans                  &trans  &trans                  &trans  &trans  &trans  &trans
 &trans  &trans      &trans         &trans         &trans                        &trans  &trans  &trans                  &trans  &trans  &trans          &trans                  &trans  &trans  &trans  &trans
            >;
        };

    };
};
